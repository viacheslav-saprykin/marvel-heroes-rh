{"version":3,"sources":["resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/pages/MainPage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js"],"names":["View","char","name","description","thumbnail","homepage","wiki","imgStyle","className","src","alt","style","href","RandomChar","useState","setChar","useMarvelService","loading","error","getCharacter","clearError","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setnewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","a","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","Skeleton","comics","CharInfo","charId","skeleton","CharSearchForm","getCharacterByName","results","to","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","ErrorBoundary","state","errorInfo","console","log","this","setState","children","Component","MainPage","selectedChar","Helmet","decoration","display","width","height","objectFit","margin","img","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","useHttp","_apiBase","_apiKey","res","_transformCharacter","getAllComics","_transformComics","getComic","slice","path","extension","urls","title","pageCount","language","textObjects","price","prices"],"mappings":"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","file":"static/js/6.955f4739.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n  const [char, setChar] = useState(null);\n  const { loading, error, getCharacter, clearError } = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n    const timerId = setInterval(updateChar, 60000);\n\n    return () => {\n      clearInterval(timerId)\n    }\n  }, [])\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  }\n\n  const updateChar = () => {\n    clearError();\n    const id = Math.floor(Math.random() * (1011400 - 1011000)) + 1011000;\n    getCharacter(id)\n      .then(onCharLoaded);\n  }\n\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading ? <Spinner /> : null;\n  const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n  return (\n    <div className=\"randomchar\">\n      {errorMessage}\n      {spinner}\n      {content}\n      <div className=\"randomchar__static\">\n        <p className=\"randomchar__title\">\n          Random character for today!<br />\n          Do you want to get to know him better?\n        </p>\n        <p className=\"randomchar__title\">\n          Or choose another one\n        </p>\n        <button onClick={updateChar} className=\"button button__main\">\n          <div className=\"inner\">try it</div>\n        </button>\n        <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n      </div>\n    </div>\n  )\n}\n\nconst View = ({ char }) => {\n  const { name, description, thumbnail, homepage, wiki } = char;\n  let imgStyle = { 'objectFit': 'cover' };\n  if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n    imgStyle = { 'objectFit': 'contain' };\n  }\n\n  return (\n    <div className=\"randomchar__block\">\n      <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle} />\n      <div className=\"randomchar__info\">\n        <p className=\"randomchar__name\">{name}</p>\n        <p className=\"randomchar__descr\">\n          {description}\n        </p>\n        <div className=\"randomchar__btns\">\n          <a href={homepage} className=\"button button__main\">\n            <div className=\"inner\">homepage</div>\n          </a>\n          <a href={wiki} className=\"button button__secondary\">\n            <div className=\"inner\">Wiki</div>\n          </a>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default RandomChar;\n","import { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charList.scss';\n\nconst CharList = (props) => {\n\n  const [charList, setCharList] = useState([]);\n  const [newItemLoading, setnewItemLoading] = useState(false);\n  const [offset, setOffset] = useState(210);\n  const [charEnded, setCharEnded] = useState(false);\n\n  const { loading, error, getAllCharacters } = useMarvelService();\n\n  useEffect(() => {\n    onRequest(offset, true);\n  }, [])\n\n  const onRequest = (offset, initial) => {\n    initial ? setnewItemLoading(false) : setnewItemLoading(true);\n    getAllCharacters(offset)\n      .then(onCharListLoaded)\n  }\n\n  const onCharListLoaded = async (newCharList) => {\n    let ended = false;\n    if (newCharList.length < 9) {\n      ended = true;\n    }\n    setCharList([...charList, ...newCharList]);\n    setnewItemLoading(false);\n    setOffset(offset + 9);\n    setCharEnded(ended);\n  }\n\n  const itemRefs = useRef([]);\n\n  const focusOnItem = (id) => {\n    itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n    itemRefs.current[id].classList.add('char__item_selected');\n    itemRefs.current[id].focus();\n  }\n\n  function renderItems(arr) {\n    const items = arr.map((item, i) => {\n      let imgStyle = { 'objectFit': 'cover' };\n      if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = { 'objectFit': 'unset' };\n      }\n\n      return (\n        <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n          <li\n            className=\"char__item\"\n            tabIndex={0}\n            ref={el => itemRefs.current[i] = el}\n            onClick={() => {\n              props.onCharSelected(item.id);\n              focusOnItem(i);\n            }}\n            onKeyPress={(e) => {\n              if (e.key === ' ' || e.key === \"Enter\") {\n                props.onCharSelected(item.id);\n                focusOnItem(i);\n              }\n            }}>\n            <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n            <div className=\"char__name\">{item.name}</div>\n          </li>\n        </CSSTransition>\n      )\n    });\n\n    return (\n      <ul className=\"char__grid\">\n        <TransitionGroup component={null}>\n          {items}\n        </TransitionGroup>\n      </ul>\n    )\n  }\n\n  const items = renderItems(charList);\n\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading && !newItemLoading ? <Spinner /> : null;\n\n  return (\n    <div className=\"char__list\">\n      {errorMessage}\n      {spinner}\n      {items}\n      <button\n        disabled={newItemLoading}\n        style={{ 'display': charEnded ? 'none' : 'block' }}\n        className=\"button button__main button__long\"\n        onClick={() => onRequest(offset)}>\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  )\n}\n\nCharList.propTypes = {\n  onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n  return (\n    <>\n      <p className=\"char__select\">Please select a character to see information</p>\n      <div className=\"skeleton\">\n        <div className=\"pulse skeleton__header\">\n          <div className=\"pulse skeleton__circle\"></div>\n          <div className=\"pulse skeleton__mini\"></div>\n        </div>\n        <div className=\"pulse skeleton__block\"></div>\n        <div className=\"pulse skeleton__block\"></div>\n        <div className=\"pulse skeleton__block\"></div>\n      </div>\n    </>\n  )\n}\n\nexport default Skeleton;\n","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n  const [char, setChar] = useState(null);\n\n  const { loading, error, getCharacter, clearError } = useMarvelService();\n\n  useEffect(() => {\n    updateChar()\n  }, [props.charId])\n\n  const updateChar = () => {\n    const { charId } = props;\n    if (!charId) {\n      return;\n    }\n\n    clearError();\n    getCharacter(charId)\n      .then(onCharLoaded)\n  }\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  }\n\n  const skeleton = char || loading || error ? null : <Skeleton />;\n  const errorMessage = error ? <ErrorMessage /> : null;\n  const spinner = loading ? <Spinner /> : null;\n  const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n  return (\n    <div className=\"char__info\">\n      {skeleton}\n      {errorMessage}\n      {spinner}\n      {content}\n    </div>\n  )\n}\n\nconst View = ({ char }) => {\n  const { name, description, thumbnail, homepage, wiki, comics } = char;\n\n  let imgStyle = { 'objectFit': 'cover' };\n  if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n    imgStyle = { 'objectFit': 'contain' };\n  }\n\n  return (\n    <>\n      <div className=\"char__basics\">\n        <img src={thumbnail} alt={name} style={imgStyle} />\n        <div>\n          <div className=\"char__info-name\">{name}</div>\n          <div className=\"char__btns\">\n            <a href={homepage} className=\"button button__main\">\n              <div className=\"inner\">homepage</div>\n            </a>\n            <a href={wiki} className=\"button button__secondary\">\n              <div className=\"inner\">Wiki</div>\n            </a>\n          </div>\n        </div>\n      </div>\n      <div className=\"char__descr\">\n        {description}\n      </div>\n      <div className=\"char__comics\">Comics:</div>\n      <ul className=\"char__comics-list\">\n        {comics.length > 0 ? null : 'There is no comics with this character'}\n        {\n          comics.map((item, i) => {\n            // eslint-disable-next-line\n            if (i > 9) return;\n            return (\n              <li key={i} className=\"char__comics-item\">\n                {item.name}\n              </li>\n            )\n          })\n        }\n      </ul>\n    </>\n  )\n}\n\nCharInfo.propTypes = {\n  charId: PropTypes.number\n}\n\nexport default CharInfo;\n","import { useState } from 'react';\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { Link } from 'react-router-dom';\n\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charSearchForm.scss';\n\nconst CharSearchForm = () => {\n  const [char, setChar] = useState(null);\n  const { loading, error, getCharacterByName, clearError } = useMarvelService();\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  }\n\n  const updateChar = (name) => {\n    clearError();\n\n    getCharacterByName(name)\n      .then(onCharLoaded);\n  }\n\n  const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\n  const results = !char ? null : char.length > 0 ?\n    <div className=\"char__search-wrapper\">\n      <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\n      <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\n        <div className=\"inner\">To page</div>\n      </Link>\n    </div> :\n    <div className=\"char__search-error\">\n      The character was not found. Check the name and try again\n    </div>;\n\n  return (\n    <div className=\"char__search-form\">\n      <Formik\n        initialValues={{\n          charName: ''\n        }}\n        validationSchema={Yup.object({\n          charName: Yup.string().required('This field is required')\n        })}\n        onSubmit={({ charName }) => {\n          updateChar(charName);\n        }}\n      >\n        <Form>\n          <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\n          <div className=\"char__search-wrapper\">\n            <Field\n              id=\"charName\"\n              name='charName'\n              type='text'\n              placeholder=\"Enter name\" />\n            <button\n              type='submit'\n              className=\"button button__main\"\n              disabled={loading}>\n              <div className=\"inner\">find</div>\n            </button>\n          </div>\n          <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\n        </Form>\n      </Formik>\n      {results}\n      {errorMessage}\n    </div>\n  )\n}\n\nexport default CharSearchForm;\n","import { Component } from \"react\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nclass ErrorBoundary extends Component {\n  state = {\n    error: false\n  }\n\n  componentDidCatch(error, errorInfo) {\n    console.log(error, errorInfo);\n    this.setState({\n      error: true\n    })\n  }\n\n  render() {\n    if (this.state.error) {\n      return <ErrorMessage />\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\nimport { Helmet } from \"react-helmet\";\n\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport CharSearchForm from '../charSearchForm/CharSearchForm';\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\n\nimport decoration from '../../resources/img/vision.png';\n\nconst MainPage = () => {\n\n  const [selectedChar, setChar] = useState(null);\n\n  const onCharSelected = (id) => {\n    setChar(id);\n  }\n\n  return (\n    <>\n      <Helmet>\n        <meta\n          name=\"description\"\n          content=\"Marvel information portal\"\n        />\n        <title>Marvel information portal</title>\n      </Helmet>\n      <ErrorBoundary>\n        <RandomChar />\n      </ErrorBoundary>\n      <div className=\"char__content\">\n        <ErrorBoundary>\n          <CharList onCharSelected={onCharSelected} />\n        </ErrorBoundary>\n        <div>\n          <ErrorBoundary>\n            <CharInfo charId={selectedChar} />\n          </ErrorBoundary>\n          <ErrorBoundary>\n            <CharSearchForm />\n          </ErrorBoundary>\n        </div>\n      </div>\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\n    </>\n  )\n}\n\nexport default MainPage;\n","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\n\nconst ErrorMessage = () => {\n  return (\n    <img style={{ display: 'block', width: \"250px\", height: \"250px\", objectFit: 'contain', margin: \"0 auto\" }} src={img} alt=\"Error\" />\n  )\n}\n\nexport default ErrorMessage;","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n  const { loading, request, error, clearError } = useHttp();\n\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n  const _apiKey = 'apikey=14b138ecc5b04330c9b1f75739e576a3';\n  const _baseOffset = 210;\n\n  const getAllCharacters = async (offset = _baseOffset) => {\n    const res = await request(\n      `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\n    );\n    return res.data.results.map(_transformCharacter);\n  };\n\n  const getCharacterByName = async (name) => {\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n    return res.data.results.map(_transformCharacter);\n  };\n\n  const getCharacter = async (id) => {\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n    return _transformCharacter(res.data.results[0]);\n  };\n\n  const getAllComics = async (offset = 0) => {\n    const res = await request(\n      `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\n    );\n    return res.data.results.map(_transformComics);\n  };\n\n  const getComic = async (id) => {\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n    return _transformComics(res.data.results[0]);\n  };\n\n  const _transformCharacter = (char) => {\n    return {\n      id: char.id,\n      name: char.name,\n      description: char.description\n        ? `${char.description.slice(0, 210)}...`\n        : \"There is no description for this character\",\n      thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\n      homepage: char.urls[0].url,\n      wiki: char.urls[1].url,\n      comics: char.comics.items,\n    };\n  };\n\n  const _transformComics = (comics) => {\n    return {\n      id: comics.id,\n      title: comics.title,\n      description: comics.description || \"There is no description\",\n      pageCount: comics.pageCount\n        ? `${comics.pageCount} p.`\n        : \"No information about the number of pages\",\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n      language: comics.textObjects[0]?.language || \"en-us\",\n      price: comics.prices[0].price\n        ? `${comics.prices[0].price}$`\n        : \"not available\",\n    };\n  };\n\n  return {\n    loading,\n    error,\n    clearError,\n    getAllCharacters,\n    getCharacterByName,\n    getCharacter,\n    getAllComics,\n    getComic,\n  };\n};\n\nexport default useMarvelService;\n","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const request = useCallback(async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\n\n    setLoading(true);\n\n    try {\n      const response = await fetch(url, { method, body, headers });\n\n      if (!response.ok) {\n        throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n      }\n\n      const data = await response.json();\n\n      setLoading(false);\n      return data;\n    } catch (e) {\n      setLoading(false);\n      setError(e.message);\n      throw e;\n    }\n  }, []);\n\n  const clearError = useCallback(() => setError(null), []);\n\n  return { loading, request, error, clearError }\n}\n"],"sourceRoot":""}